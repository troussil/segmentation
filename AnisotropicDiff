
import java.io.File;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Arrays;

import java.io.File;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Arrays;

	public class PIR {
	public static String PATH;
	public static void main (String args[]) throws IOException{
		String path="imagearticle.png";
		PATH=path;
		int[][] tab=tool.getArray(path);
		//meanSmooth(tab,10);
		double sig=turkey.sigmae(tab);
		System.out.println(sig);
		//tab=turkey.turkeyBorder(tab,600,123);
		//getImage(tab,path);
		
	}
        
    public static int[][] meanSmooth(int[][] Source,int intensity) throws IOException{
			
			int w =  Source[0].length;
			int h =  Source[1].length;
			//System.out.println("H= "+h+"   w="+w);
			int[][] Output = Source;
			
			for(int i=0;i<intensity;i++){
				for(int y = 1; y <h; y++){
					for(int x = 1; x <w; x++){
						//CALCUL DES BORDS ET COINS
						if(x==1 &&  y==1){
							Output[x][y]=(Source[x+1][y]+Source[x][y+1])/2;
						}else if(x==1 &&  y==(h-1)){
							Output[x][y]=(Source[x+1][y]+Source[x][y-1])/2;
							
						}else if(x==w-1 &&  y==1){
							Output[x][y]=(Source[x-1][y]+Source[x][y+1])/2;
						}else if(x==w-1 &&  y==h-1){
							Output[x][y]=(Source[x-1][y]+Source[x][y-1])/2;
						}else if(x==1){
							Output[x][y]=(Source[x+1][y]+Source[x][y-1]+Source[x][y+1])/3;
						}else if(x==w-1){
							Output[x][y]=(Source[x-1][y]+Source[x][y-1]+Source[x][y+1])/3;
						}else if(y==1){
							Output[x][y]=(Source[x+1][y]+Source[x-1][y]+Source[x][y+1])/3;
						}else if(y==h-1){
							Output[x][y]=(Source[x+1][y]+Source[x-1][y]+Source[x][y+-1])/3;
						}else {
							//GENERAL
							Output[x][y]=(Source[x-1][y]+Source[x+1][y]+Source[x][y-1]+Source[x][y+1])/4;
						}
					}
				}
			Source=Output;
		}
		tool.getImage(Output,"meansmooth"+intensity+PATH);
		return Output;
	}

}

public class tool {
	
	public static int[][] getArray(String path ) throws IOException{
				
			BufferedImage Source= ImageIO.read(new File(path));
			
			int w =  Source.getWidth();
			int h =  Source.getHeight();
			int[][] Output = new int[h][w];
			
			for(int y = 1; y < h; y++){
				for(int x = 1; x < w; x++){
					int p = Source.getRGB(x,y);

					int a = (p>>24)&0xff;
				    int r = (p>>16)&0xff;
				    int g = (p>>8)&0xff;
				    int b = p&0xff;

					//calcul intensit√©
					int avg = (r+g+b)/3;
					Output[y][x]=avg;
				}
			}
		return Output;
        }
        

	public static void getImage(int[][] Source ,String path) throws IOException{
			int w =  Source[0].length;
			int h =  Source[1].length;
			BufferedImage Output= new BufferedImage(w,h, BufferedImage.TYPE_INT_ARGB);
			
			
			
			for(int y = 1; y < h; y++){
				for(int x = 1; x < w; x++){
					int val=Source[y][x];
					int p =0;
					p= (255<<24) | (val<<16) | (val<<8) | val;
					Output.setRGB(x,y,p);

				}
			}
		ImageIO.write(Output, "png",new File(path));
		
        }
}






import java.io.File;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Arrays;

public class turkey {

	public static int biweight(int x, double sigma){
		//X DIFFERENCE ENTRE PIXEL ET SON VOISIN
		if(Math.abs(x)<=sigma) return (int) (x*Math.pow(1-Math.pow(x/sigma,2),2));
		else return 0;
	}

	public static double sigmae(int[][] img){
		int[] source =new int[img[0].length*img[1].length];
		int k=0;
		for(int i=0;i<img[1].length;i++){
			for(int j=0;j<img[0].length;j++){
				source[k]=img[i][j];
				k++;
			}
		}
		
		
		int l=source.length;
		Arrays.sort(source);
		
		int med;
		if(l%2==0) med= source[l/2+1];
		else 	med=source[((l-1)/2)+1];
		
		for(int i=0;i<l;i++){
			source[i]=Math.abs(source[i]-med);
		}
		
		Arrays.sort(source);
		System.out.println(med);
		System.out.println(Arrays.toString(source));
		if(l%2==0) med= source[l/2+1];
		else 	med=source[((l-1)/2)+1];
		System.out.println(med);
		double sigmae = 1.4826*med;
		return sigmae;


		}
		
	public static int[][] smooth(int[][] Source,int intensity,int sigma,String PATH) throws IOException{
			
			int w =  Source[1].length;
			int h =  Source[0].length;
			//System.out.println("H= "+h+"   w="+w);
			int[][] Output = Source;
			
			for(int i=0;i<intensity;i++){
				for(int y = 1; y <h; y++){
					for(int x = 1; x <w; x++){
						//CALCUL DES BORDS ET COINS
						if(x==1 &&  y==1){
							Output[x][y]=(Source[x+1][y]+Source[x][y+1])/2;
						}else if(x==1 &&  y==(h-1)){
							Output[x][y]=(Source[x+1][y]+Source[x][y-1])/2;
							
						}else if(x==w-1 &&  y==1){
							Output[x][y]=(Source[x-1][y]+Source[x][y+1])/2;
						}else if(x==w-1 &&  y==h-1){
							Output[x][y]=(Source[x-1][y]+Source[x][y-1])/2;
						}else if(x==1){
							Output[x][y]=(Source[x+1][y]+Source[x][y-1]+Source[x][y+1])/3;
						}else if(x==w-1){
							Output[x][y]=(Source[x-1][y]+Source[x][y-1]+Source[x][y+1])/3;
						}else if(y==1){
							Output[x][y]=(Source[x+1][y]+Source[x-1][y]+Source[x][y+1])/3;
						}else if(y==h-1){
							Output[x][y]=(Source[x+1][y]+Source[x-1][y]+Source[x][y+-1])/3;
						}else {
							//GENERAL
							Output[x][y]=Output[x][y]+(biweight(Source[x-1][y]-Output[x][y],sigma)+
										biweight(Source[x+1][y]-Output[x][y],sigma)+
										biweight(Source[x][y+1]-Output[x][y],sigma)+
										biweight(Source[x][y-1]-Output[x][y],sigma))/4;
						}
					}
				}
			Source=Output;
		}
		tool.getImage(Output,"turkeySmooth"+intensity+"_"+sigma+PATH);
		return Output;
	}	
	
	public static int[][] border(int[][] Source,int intensity,int sigma,String PATH) throws IOException{
			
			int w =  Source[0].length;
			int h =  Source[1].length;
			//System.out.println("H= "+h+"   w="+w);
			int[][] Output = Source;
			
			for(int i=0;i<intensity-1;i++){
				for(int y = 0; y <h; y++){
					for(int x = 0; x <w; x++){
						//CALCUL DES BORDS ET COINS
						int border=0;
						if(x==0 &&  y==0){
							Output[x][y]=(Source[x+1][y]+Source[x][y+1])/2;
						}else if(x==0 &&  y==(h-1)){
							Output[x][y]=(Source[x+1][y]+Source[x][y-1])/2;
							
						}else if(x==w-1 &&  y==0){
							Output[x][y]=(Source[x-1][y]+Source[x][y+1])/2;
						}else if(x==w-1 &&  y==h-1){
							Output[x][y]=(Source[x-1][y]+Source[x][y-1])/2;
						}else if(x==0){
							Output[x][y]=(Source[x+1][y]+Source[x][y-1]+Source[x][y+1])/3;
						}else if(x==w-1){
							Output[x][y]=(Source[x-1][y]+Source[x][y-1]+Source[x][y+1])/3;
						}else if(y==0){
							Output[x][y]=(Source[x+1][y]+Source[x-1][y]+Source[x][y+1])/3;
						}else if(y==h-1){
							Output[x][y]=(Source[x+1][y]+Source[x-1][y]+Source[x][y+-1])/3;
						}else {
							//GENERAL
							Output[x][y]=Output[x][y]+(biweight(Source[x-1][y]-Output[x][y],sigma)+
										biweight(Source[x+1][y]-Output[x][y],sigma)+
										biweight(Source[x][y+1]-Output[x][y],sigma)+
										biweight(Source[x][y-1]-Output[x][y],sigma))/4;

						}
					}
				}
			Source=Output;
		}
			for(int y = 1; y <h-1; y++){
				for(int x = 1; x <w-1; x++){
				
					if(biweight(Source[x-1][y]-Output[x][y],sigma)==0 || biweight(Source[x+1][y]-Output[x][y],sigma)==0 || biweight(Source[x][y+1]-Output[x][y],sigma)==0 || biweight(Source[x][y-1]-Output[x][y],sigma)==0){
						Output[x][y]=0;
					}else{
						Output[x][y]=255;
					}
				}
			}
		tool.getImage(Output,"turkeyborder"+intensity+"_"+sigma+PATH);
		return Output;
	}
}


